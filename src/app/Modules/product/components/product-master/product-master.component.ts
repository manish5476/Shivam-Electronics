import { Component, Inject, Input, PLATFORM_ID, SimpleChanges, OnInit } from '@angular/core';
import { FloatLabelModule } from 'primeng/floatlabel';
import { FormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';
import { InputTextModule } from 'primeng/inputtext';
import { ButtonModule } from 'primeng/button';
import { TextareaModule } from 'primeng/textarea';
import { ProductService } from '../../../../core/services/product.service';
import { Select, SelectModule } from 'primeng/select'; // Assuming p-select is from primeng/select or similar
import { DropdownModule } from 'primeng/dropdown'; // For availabilityStatus
import { ConfirmationService, MessageService } from 'primeng/api';
import lodash from 'lodash';
import { AutopopulateService } from '../../../../core/services/autopopulate.service';
import { Toast } from "primeng/toast";

// Updated Product Interface based on Mongoose Schema
interface Product {
  _id?: string;
  title: string;
  slug?: string; // Auto-generated by backend
  description: string;
  category: string;
  tags: string[]; // Input as comma-separated string, convert in service/onSubmit if needed
  brand: string;
  sku: string;
  thumbnail: string;
  rate: number;
  price?: number; // Calculated by backend (rate + gstAmount)
  gstRate: number;
  discountPercentage?: number;
  stock: number;
  availabilityStatus: 'In Stock' | 'Low Stock' | 'Out of Stock';
  finalPrice?: number; // Virtual, read-only from backend
  reviews?: any[]; // Virtual, populated from backend
  createdAt?: Date;
  updatedAt?: Date;
}

@Component({
  selector: 'app-product-master',
  standalone: true, // Assuming Angular 17+ structure, add if needed or adjust imports
  imports: [
    FloatLabelModule,
    SelectModule, // For p-select
    DropdownModule, // For p-dropdown
    FormsModule,
    CommonModule,
    RouterModule,
    InputTextModule,
    TextareaModule,
    ButtonModule,
    Toast
],
  templateUrl: './product-master.component.html',
  styleUrl: './product-master.component.css',
  providers: [ConfirmationService, MessageService]
})
export class ProductMasterComponent implements OnInit {
  isDarkMode: boolean = false; // Default to light mode

  product: Product = {
    title: '',
    description: '',
    category: '',
    tags: [],
    brand: '',
    sku: '',
    thumbnail: '',
    rate: 0,
    // price: 0, // Will be calculated/fetched or set by backend logic
    gstRate: 18, // Default from schema
    discountPercentage: 0, // Default from schema
    stock: 0,
    availabilityStatus: 'In Stock', // Default from schema
  };

  @Input() redirectedData: any;
  public productdata: any;
  public productdropdwn: any[] = [];
  public selectedProductId: any;

  availabilityOptions = [
    { label: 'In Stock', value: 'In Stock' },
    { label: 'Low Stock', value: 'Low Stock' },
    { label: 'Out of Stock', value: 'Out of Stock' }
  ];

  // Consolidating variable names for clarity
  public productsForDropdown: any[] = [];


  constructor(
    private productService: ProductService,
    private autoPopulate: AutopopulateService,
  
    private messageService: MessageService,
    @Inject(PLATFORM_ID) private platformId: Object
  ) { }

  ngOnInit() {
    if (typeof document !== 'undefined') {
      document.body.classList.toggle('dark', this.isDarkMode);
    }
    this.autopopulatedata();
  }

    autopopulatedata() {
    // this.autoPopulate.getModuleData('products').subscribe((data:any) => {
    //   this.productdrop = data;
    // });
    // this.autoPopulate.getModuleData('sellers').subscribe((data:any) => {
    //   this.sellersDrop = data;
    // });
    this.autoPopulate.getModuleData('products').subscribe((data: any) => {
      this.productsForDropdown = data;
    });
  }
  
  calculatePrice() {
  if (this.product?.rate != null && this.product?.gstRate != null) {
    this.product.price = this.product.rate + (this.product.rate * this.product.gstRate) / 100;
  }
}


  // loadProductDropdownData() {
  //   const autopopulateData: any = JSON.parse(sessionStorage.getItem('autopopulate') || '{}');

  //   if (autopopulateData && Array.isArray(autopopulateData.productsdrop)) {
  //     this.productsForDropdown = lodash.cloneDeep(autopopulateData.productsdrop);
  //   } else {
  //     this.productsForDropdown = [];
  //     this.messageService.add({
  //       severity: 'info',
  //       summary: 'Info',
  //       detail: 'No valid product dropdown data found in session storage.',
  //       life: 3000
  //     });
  //   }
  // }

  toggleDarkMode() {
    this.isDarkMode = !this.isDarkMode;
    if (typeof document !== 'undefined') {
      document.body.classList.toggle('dark', this.isDarkMode);
    }
  }

  ngOnChanges(changes: SimpleChanges): void {
    if (changes['redirectedData'] && this.redirectedData) {
      // Ensure the redirectedData conforms to the Product interface
      // You might need to map fields if the structure is different
      this.product = { ...this.product, ...this.redirectedData };
    }
  }

  updateProduct() {
    if (!this.selectedProductId) {
      this.messageService.add({ severity: 'warn', summary: 'Warning', detail: 'No product selected for update.', life: 3000 });
      return;
    }
    // Ensure tags are an array if input is string
    const payload = { ...this.product };
    if (typeof payload.tags === 'string') {
      payload.tags = (payload.tags as unknown as string).split(',').map(tag => tag.trim()).filter(tag => tag !== '');
    }

    this.productService.updateProduct(this.selectedProductId, payload).subscribe({
      next: (res: any) => {
        this.messageService.add({ severity: 'success', summary: 'Success', detail: 'Product updated successfully!', life: 3000 });
        this.product = res.data || res; // Assuming response contains the updated product
      },
      error: (err: any) => {
        this.messageService.add({ severity: 'error', summary: 'Error', detail: 'Failed to update product. ' + (err.error?.message || err.message), life: 3000 });
        console.error('Error updating product:', err);
      }
    });
  }

  fetchProductDetails() {
    if (this.selectedProductId) {
      this.productService.getProductDataWithId(this.selectedProductId).subscribe({
        next: (res: any) => {
          if (res && res.data) {
            this.product = res.data;
            // Handle tags: if it's an array, join for display in text input, or use a chip component
            if (Array.isArray(res.data.tags)) {
              this.product.tags = res.data.tags.join(', ') as any; // Temporarily cast for ngModel if input is text
            }
            this.messageService.add({ severity: 'info', summary: 'Fetched', detail: 'Product data loaded.', life: 3000 });
          } else {
            this.messageService.add({ severity: 'warn', summary: 'Warning', detail: 'No data found for the selected product.', life: 3000 });
          }
        },
        error: (error: any) => {
          this.messageService.add({ severity: 'error', summary: 'Error', detail: 'Failed to fetch product data.', life: 3000 });
          console.error('Error fetching product data:', error);
        }
      });
    } else {
      this.resetForm();
      this.messageService.add({ severity: 'info', summary: 'Info', detail: 'No product selected. Form reset.', life: 3000 });
    }
  }

  resetForm() {
    this.product = {
      title: '',
      description: '',
      category: '',
      tags: [],
      brand: '',
      sku: '',
      thumbnail: '',
      rate: 0,
      gstRate: 18,
      discountPercentage: 0,
      stock: 0,
      availabilityStatus: 'In Stock',
    };
    this.selectedProductId = null;
  }


  submitProduct() {
    // Ensure tags are an array if input is string
    const payload = { ...this.product };
    if (typeof payload.tags === 'string') {
      payload.tags = (payload.tags as unknown as string).split(',').map(tag => tag.trim()).filter(tag => tag !== '');
    } else if (!Array.isArray(payload.tags)) {
      payload.tags = [];
    }


    this.productService.createNewProduct(payload).subscribe({
      next: (res: any) => {
        this.messageService.add({ severity: 'success', summary: 'Success', detail: 'Product created successfully!', life: 3000 });
        // Optionally reset form or navigate
        this.resetForm();
      },
      error: (err: any) => {
        this.messageService.add({ severity: 'error', summary: 'Error', detail: 'Failed to create product. ' + (err.error?.message || err.message), life: 3000 });
        console.error('Error creating product:', err);
      }
    });
  }
}
// import { Component, Inject, Input, PLATFORM_ID, SimpleChanges } from '@angular/core';
// import { FloatLabelModule } from 'primeng/floatlabel';
// import { FormsModule } from '@angular/forms';
// import { RouterModule } from '@angular/router';
// import { CommonModule } from '@angular/common';
// import { InputTextModule } from 'primeng/inputtext';
// import { ButtonModule } from 'primeng/button';
// import { TextareaModule } from 'primeng/textarea';
// import { ProductService } from '../../../../core/services/product.service';
// import { Select } from 'primeng/select';
// import { ConfirmationService, MessageService } from 'primeng/api';
// import lodash from 'lodash'
// interface DetailedDescription {
//   id: string;
//   detail: string;
// }

// interface Dimensions {
//   width: string;
//   height: string;
//   depth: string;
// }

// interface Location {
//   type: 'Point';
//   coordinates: string;
//   address?: string;
//   description?: string;
//   day?: string;
// }

// interface Image {
//   id?: string;
//   detail?: string;
//   link?: string;
// }

// interface Meta {
//   createdAt: Date;
//   updatedAt: Date;
//   barcode: string;
//   qrCode?: string;
// }

// interface StartLocation {
//   type: 'Point';
//   coordinates: string; // Changed to string
//   address?: string;
//   description?: string;
// }

// interface Product {
//   title: string;
//   description: string;
//   detailedDescriptions: DetailedDescription[];
//   category: string;
//   rate: string;
//   cgst: string;
//   sgst: string;
//   price: string;
//   discountPercentage?: string;
//   ratingAverage?: string;
//   ratingQuantity?: string;
//   stock: string;
//   tags: string[];
//   brand: string;
//   sku: string;
//   weight: string;
//   dimensions: Dimensions;
//   warrantyInformation: string;
//   shippingInformation: string;
//   availabilityStatus: 'In Stock' | 'Low Stock' | 'Out of Stock';
//   // startLocation: StartLocation;
//   // locations: Location[];
//   returnPolicy: string;
//   minimumOrderQuantity?: string;
//   meta: Meta;
//   images: Image[]; // Changed to non-optional
//   thumbnail: string;
//   salesPerson?: any[];
// }

// @Component({
//   selector: 'app-product-master',
//   imports: [FloatLabelModule, Select, FormsModule, CommonModule, RouterModule, InputTextModule, TextareaModule, ButtonModule],
//   templateUrl: './product-master.component.html',
//   styleUrl: './product-master.component.css',
//   providers: [ConfirmationService, MessageService]
// })
// export class ProductMasterComponent {
//   isDarkMode: boolean = true;


//   product: Product = {
//     title: '',
//     description: '',
//     detailedDescriptions: [{ id: '', detail: '' }],
//     category: 'manish',
//     rate: '',
//     cgst: '9',
//     sgst: '9',
//     price: '',
//     stock: '',
//     tags: [],
//     brand: '',
//     sku: '',
//     weight: '',
//     dimensions: { width: '', height: '', depth: '' },
//     warrantyInformation: '',
//     shippingInformation: '',
//     availabilityStatus: 'In Stock',
//     returnPolicy: '',
//     minimumOrderQuantity: '',
//     meta: { createdAt: new Date(), updatedAt: new Date(), barcode: '' },
//     images: [{ id: '', detail: '', link: '' }], // Initialized
//     thumbnail: '',
//     salesPerson: [],
//   };
//   // startLocation: { type: 'Point', coordinates: '' }, // Initialized as string
//   // locations: [{ type: 'Point', coordinates: '' }], // Initialized as string
//   @Input() redirectedData: any
//   public productdata: any
//   public productdropdwn: any
//   public selectedProductId: any;

//   constructor(private ProductService: ProductService, private messageService: MessageService, @Inject(PLATFORM_ID) private platformId: Object) { }
//   ngOnInit() {
//     document.body.classList.toggle('dark', this.isDarkMode);
//     this.autopopulatedata()
//   }
//   // toggleDarkMode() {
//   // }

//   autopopulatedata() {
//     const autopopulate: any = JSON.parse(sessionStorage.getItem('autopopulate') || '{}');

//     if (autopopulate && Array.isArray(autopopulate.productsdrop)) {
//       this.productdropdwn = lodash.cloneDeep(autopopulate.productsdrop)
//     } else {
//       this.productdropdwn = [];
//       this.messageService.add({
//         severity: 'info',
//         summary: 'Info',
//         detail: 'No valid customer data found',
//         life: 3000
//       });
//     }
//   }


//   toggleDarkMode() {
//     // this.isDarkMode = !this.isDarkMode;
//     document.body.classList.toggle('dark', this.isDarkMode);
//   }

//   ngOnChanges(changes: SimpleChanges): void {
//     if (this.redirectedData) this.product = this.redirectedData
//   }

//   Update() {
//     this.ProductService.updateProduct(this.selectedProductId, this.product).subscribe((res: any) => {
//     })
//   }

//   autopopulate() {
//     if (this.selectedProductId) { // Check if a product ID is selected
//       this.ProductService.getProductDataWithId(this.selectedProductId).subscribe(
//         (res: any) => {
//           this.productdata = res;
//           this.product = res.data
//         },
//         (error) => {
//           console.error('Error fetching product data:', error);
//         }
//       );
//     }
//   }

//   addDetailedDescription() {
//     this.product.detailedDescriptions.push({ id: '', detail: '' });
//   }

//   // addLocation() {
//   //   this.product.locations.push({ type: 'Point', coordinates: '' });
//   // }

//   addImage() {
//     this.product.images.push({ id: '', detail: '', link: '' });
//   }

//   removeImage(index: number) {
//     this.product.images.splice(index, 1);
//   }

//   onSubmit() {
//     this.ProductService.createNewProduct(this.product).subscribe((res: any) => {
//     })
//   }
// }
